using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Avalonia.Media.Imaging;
using BTCWallet.DataModels;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.EntityFrameworkCore;
using NBitcoin;
using QRCoder;
using SixLabors.ImageSharp.Formats.Png;

namespace BTCWallet.ViewModels.WalletProfile;

public partial class WalletProfileReceiveViewModel : ViewModelBase
{

    private long _walletId;
    private uint _recAddressDerivationIndex;

    [ObservableProperty] private string _recAddressWif = string.Empty;
    [ObservableProperty] private string _recAddressDerivation = string.Empty;
    // ReSharper disable once InconsistentNaming
    [ObservableProperty] private Task<Bitmap>? _recAddressQR;
    // ReSharper disable once InconsistentNaming
    [ObservableProperty] private string _recAddressQRText = string.Empty;
    [ObservableProperty] private Script? _recAddressScript;
    
    [ObservableProperty] private string? _amount;
    partial void OnAmountChanged(string? newValue)
    {
        RecAddressQRText = GetLastUnusedRecAddressQRText();
        RecAddressQR = SetRecAddressQRAsync();
    }

    [ObservableProperty]
    private string? _message;

    partial void OnMessageChanged(string? value)
    {
        RecAddressQRText = GetLastUnusedRecAddressQRText();
        RecAddressQR = SetRecAddressQRAsync();
    }

    public WalletProfileReceiveViewModel(long walletId)
    {
        _walletId = walletId;
        Initialization();
    }

    private async void Initialization()
    {
        _recAddressDerivationIndex = await GetLastUnusedRecDerivationAddressIndexAsync(_walletId).ConfigureAwait(false);
        RecAddressWif = await GetLastUnusedRecAddressAsync(_walletId, (int)_recAddressDerivationIndex).ConfigureAwait(false);
        RecAddressDerivation = await GetLastUnusedRecAddressKPAsync().ConfigureAwait(false);
        RecAddressQRText = GetLastUnusedRecAddressQRText();
        RecAddressScript = await GetAddressScriptAsync(_recAddressDerivationIndex, _walletId).ConfigureAwait(false);
        RecAddressQR = SetRecAddressQRAsync();
    }
    
    private async Task<Bitmap> SetRecAddressQRAsync()
    {
        using QRCodeGenerator qrGenerator = new QRCodeGenerator();
        QRCodeData qrCodeData = qrGenerator.CreateQrCode(RecAddressQRText, QRCodeGenerator.ECCLevel.Q);
        using (QRCode qrCode = new QRCode(qrCodeData))
        {
            using (var bitmap = qrCode.GetGraphic(20))
            {
                using (var stream = new MemoryStream())
                {
                    await bitmap.SaveAsync(stream, new PngEncoder());
                    stream.Seek(0, SeekOrigin.Begin);
                    var bitmapImage = new Bitmap(stream);
                    return bitmapImage;
                }
            }
        }
    }
    
    private string GetLastUnusedRecAddressQRText()
    {
        string qrText = $"bitcoin:{RecAddressWif}";
        if (!string.IsNullOrEmpty(Amount))
        {
            qrText += $"?amount={Amount}";
            if (!string.IsNullOrEmpty(Message))
                qrText += $"&message={Message}";
        }
        else if (!string.IsNullOrEmpty(Message))
            qrText += $"?message={Message}";
        
        return qrText;
    }

    private async Task<string> GetLastUnusedRecAddressKPAsync()
    {
        await using var db = new WalletDbContext();
        var derivationPath = 
            from wall in db.Wallets
            where wall.WalletId == _walletId
            select wall.Derivation;
        
        return $"{await derivationPath.FirstAsync()}/0/{_recAddressDerivationIndex.ToString()}";
    }

    [RelayCommand]
    private async Task UseNextRecAddressAsync()
    {
        {
            await using var db = new WalletDbContext();
            var profile = await db.FindAsync<Profile>(_walletId);
            profile!.LastUnusedAddrIndexRec = ++_recAddressDerivationIndex;
            
            await db.SaveChangesAsync();
        }
        
        await GenerateNewHDAddressAsync
            (walletChain: 0, _walletId, (uint)(_recAddressDerivationIndex+AutoGeneratedAddressNumber));

        RecAddressWif = await GetLastUnusedRecAddressAsync(_walletId, (int)_recAddressDerivationIndex);
        RecAddressDerivation = await GetLastUnusedRecAddressKPAsync();
        RecAddressQRText = GetLastUnusedRecAddressQRText();
        RecAddressScript = await GetAddressScriptAsync(_recAddressDerivationIndex, _walletId);
        RecAddressQR = SetRecAddressQRAsync();
    }
}