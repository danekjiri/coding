// <auto-generated />
using System;
using BTCWallet.DataModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BTCWallet.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    partial class WalletDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("BTCWallet.DataModels.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AddressID");

                    b.Property<string>("AddressWif")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("IsChange")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("PublicKeyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PublicKeyID");

                    b.HasKey("AddressId");

                    b.HasIndex("PublicKeyId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Input", b =>
                {
                    b.Property<long>("InputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("InputID");

                    b.Property<long>("AmountSatoshi")
                        .HasColumnType("INTEGER");

                    b.Property<long>("InputIndex")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PreviousOutIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviousOutTxHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptSig")
                        .HasColumnType("TEXT");

                    b.Property<long>("TransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TransactionID");

                    b.HasKey("InputId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Inputs");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Output", b =>
                {
                    b.Property<long>("OutputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("OutputID");

                    b.Property<long?>("AddressId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AddressID");

                    b.Property<string>("AddressWif")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("AmountSatoshi")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InputId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("InputID");

                    b.Property<long?>("IsSpent")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OutputIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScriptPubKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TransactionID");

                    b.HasKey("OutputId");

                    b.HasIndex("AddressId");

                    b.HasIndex("InputId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Outputs");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Profile", b =>
                {
                    b.Property<long>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProfileID");

                    b.Property<long>("LastUnusedAddrIndexChan")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUnusedAddrIndexRec")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("WalletId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("WalletID");

                    b.HasKey("ProfileId");

                    b.HasIndex("WalletId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("BTCWallet.DataModels.PublicKey", b =>
                {
                    b.Property<long>("PublicKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PublicKeyID");

                    b.Property<string>("ChainCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("IsCompressed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrivateKeyWif")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicKeyWif")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SequenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("WalletId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("WalletID");

                    b.HasKey("PublicKeyId");

                    b.HasIndex("WalletId");

                    b.ToTable("PublicKeys");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TransactionID");

                    b.Property<long?>("BlockHeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("FeeSatoshi")
                        .HasColumnType("INTEGER");

                    b.Property<long>("IsCreated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TxHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Wallet", b =>
                {
                    b.Property<long>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("WalletID");

                    b.Property<string>("Derivation")
                        .HasColumnType("TEXT");

                    b.Property<long>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MasterKeyWif")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mnemonic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Passphrase")
                        .HasColumnType("TEXT");

                    b.Property<string>("XpubWif")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("XPubWif");

                    b.HasKey("WalletId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Address", b =>
                {
                    b.HasOne("BTCWallet.DataModels.PublicKey", "PublicKey")
                        .WithMany("Addresses")
                        .HasForeignKey("PublicKeyId");

                    b.Navigation("PublicKey");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Input", b =>
                {
                    b.HasOne("BTCWallet.DataModels.Transaction", "Transaction")
                        .WithMany("Inputs")
                        .HasForeignKey("TransactionId")
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Output", b =>
                {
                    b.HasOne("BTCWallet.DataModels.Address", "Address")
                        .WithMany("Outputs")
                        .HasForeignKey("AddressId");

                    b.HasOne("BTCWallet.DataModels.Input", "Input")
                        .WithMany("Outputs")
                        .HasForeignKey("InputId");

                    b.HasOne("BTCWallet.DataModels.Transaction", "Transaction")
                        .WithMany("Outputs")
                        .HasForeignKey("TransactionId")
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Input");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Profile", b =>
                {
                    b.HasOne("BTCWallet.DataModels.Wallet", "Wallet")
                        .WithMany("Profiles")
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BTCWallet.DataModels.PublicKey", b =>
                {
                    b.HasOne("BTCWallet.DataModels.Wallet", "Wallet")
                        .WithMany("PublicKeys")
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Address", b =>
                {
                    b.Navigation("Outputs");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Input", b =>
                {
                    b.Navigation("Outputs");
                });

            modelBuilder.Entity("BTCWallet.DataModels.PublicKey", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Transaction", b =>
                {
                    b.Navigation("Inputs");

                    b.Navigation("Outputs");
                });

            modelBuilder.Entity("BTCWallet.DataModels.Wallet", b =>
                {
                    b.Navigation("Profiles");

                    b.Navigation("PublicKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
